Тип шаблона: Комбинированное использование шаблонов проектирования
Название мини-приложения: Система управления заказами в ресторане

Описание:
Мини-приложение представляет собой систему управления заказами в ресторане. Оно объединяет несколько шаблонов проектирования для решения различных задач:

1. **Строитель (Builder)**:
   - Задача: Создание сложных объектов (заказов) с множеством параметров (основное блюдо, гарнир, напиток, десерт).
   - Решение: Шаблон Builder позволяет гибко настраивать заказы, добавляя или удаляя блюда, без необходимости создания множества конструкторов.
   - Почему: Этот шаблон упрощает процесс создания объектов и делает код более читаемым и поддерживаемым.

2. **Наблюдатель (Observer)**:
   - Задача: Уведомление кухни и клиентов о статусе заказа (например, "в процессе", "готово").
   - Решение: Шаблон Observer позволяет объектам (кухне и клиенту) подписываться на изменения состояния заказа и автоматически получать уведомления.
   - Почему: Этот шаблон разделяет логику уведомлений и обработки заказов, что упрощает добавление новых наблюдателей.

3. **Цепочка обязанностей (Chain of Responsibility)**:
   - Задача: Обработка заказов в зависимости от их типа (стандартный или VIP).
   - Решение: Шаблон Chain of Responsibility позволяет передавать заказы по цепочке обработчиков, где каждый обработчик решает, может ли он обработать заказ.
   - Почему: Этот шаблон упрощает добавление новых типов заказов и обработчиков без изменения существующего кода.

4. **Фасад (Facade)**:
   - Задача: Упрощение взаимодействия с системой заказов.
   - Решение: Шаблон Facade предоставляет простой интерфейс для создания заказов и уведомления о статусе, скрывая сложность внутренней логики.
   - Почему: Этот шаблон делает систему более удобной для использования и упрощает интеграцию с другими частями приложения.

Задача:
Мини-приложение решает задачу автоматизации управления заказами в ресторане. Оно позволяет:
- Создавать заказы с различными параметрами.
- Обрабатывать заказы в зависимости от их типа (стандартный или VIP).
- Уведомлять кухню и клиентов о статусе заказа.
- Упрощать взаимодействие с системой заказов через фасад.

Почему выбраны эти шаблоны:
- **Гибкость**: Шаблоны позволяют легко добавлять новые типы заказов, обработчики и наблюдатели.
- **Расширяемость**: Система может быть легко расширена для поддержки новых функций (например, новых типов заказов или уведомлений).
- **Поддерживаемость**: Код становится более читаемым и модульным, что упрощает его поддержку и тестирование.
- **Разделение ответственности**: Каждый шаблон решает свою задачу, что делает систему более организованной и понятной.

Пример использования:
1. Создание заказа через фасад.
2. Обработка заказа в зависимости от его типа с использованием Chain of Responsibility.
3. Уведомление кухни и клиентов о статусе заказа с использованием Observer.

Пример вывода:
Order created: Order: Pizza, Salad, Water, Ice Cream (Type: Standard)
Order created: Order: Steak, Fries, Wine, Cheesecake (Type: VIP)
Processing order: Order: Pizza, Salad, Water, Ice Cream (Type: Standard)
Standard order handled: Order: Pizza, Salad, Water, Ice Cream (Type: Standard)
Processing order: Order: Steak, Fries, Wine, Cheesecake (Type: VIP)
VIP order handled: Order: Steak, Fries, Wine, Cheesecake (Type: VIP)
Kitchen: Order status changed to In Progress
Customer: Order status changed to In Progress
Kitchen: Order status changed to Ready
Customer: Order status changed to Ready

Заключение:
Мини-приложение демонстрирует, как можно эффективно использовать шаблоны проектирования для создания гибкой,
расширяемой и поддерживаемой системы управления заказами в ресторане.